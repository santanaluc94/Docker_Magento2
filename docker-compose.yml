version: '3.8'

services:
  db:
    image: mariadb:${DB_VERSION}
    container_name: magento_two_mysql
    ports:
      - ${DB_PORT}:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD_ROOT}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db:/var/lib/mysql
    networks:
      net:
        ipv4_address: ${DB_IP_ADDRESS}

  phpmyadmin:
    image: phpmyadmin
    container_name: magento_two_phpmyadmin
    ports:
      - ${DB_PHPMYADMIN_PORT}:80
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: db
      PMA_USER: ${DB_USER}
      PMA_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD_ROOT}
      PMA_PORT: ${DB_PORT}
    links:
      - db
    depends_on:
      - db
    networks:
      net:
        ipv4_address: ${DB_PHPMYADMIN_IP_ADDRESS}

  web:
    image: nginx:${WEB_VERSION}
    container_name: magento_two_nginx
    volumes:
      - ./src:/var/www/html
      - ./.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./.docker/nginx/cert.pem:/etc/nginx/certs/cert.pem
      - ./.docker/nginx/key.pem:/etc/nginx/certs/key.pem
    ports:
      - ${WEB_HTTP_PORT}:80
      - ${WEB_HTTPS_PORT}:443
    depends_on:
      - db
    networks:
      net:
        ipv4_address: ${WEB_IP_ADDRESS}

  php:
    image: magento_two_php
    container_name: magento_two_php
    build:
      context: ./.docker/php
      dockerfile: Dockerfile
      args:
        PHP_VERSION: ${PHP_VERSION}
    ports:
      - ${PHP_PORT}:9000
    expose:
      - ${PHP_PORT}
    volumes:
      - ./src:/var/www/html
      - ./.docker/php/ini/memory_limit.ini:/usr/local/etc/php/conf.d/memory_limit.ini
      - ./.docker/php/ini/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    working_dir: /var/www/html
    links:
      - db
    depends_on:
      - db
      - web
    networks:
      net:
        ipv4_address: ${PHP_IP_ADDRESS}

  redis:
    image: redis:${REDIS_VERSION}
    container_name: magento_two_redis
    ports:
      - ${REDIS_PORT}:6379
    networks:
      net:
        ipv4_address: ${REDIS_IP_ADDRESS}

  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION}-management
    container_name: magento_two_rabbitmq
    ports:
      - ${RABBITMQ_QUEUE_PORT}:5672
      - ${RABBITMQ_MANAGEMENT_PORT}:15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      net:
        ipv4_address: ${RABBITMQ_IP_ADDRESS}

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION}
    container_name: magento_two_elasticsearch
    ports:
      - ${ELASTICSEARCH_PORT}:9200
      - ${ELASTICSEARCH_PORT_SECONDARY}:9300
    environment:
      node.name: ${ELASTICSEARCH_NODE_NAME}
      cluster.name: ${ELASTICSEARCH_CLUSTER_NAME}
      discovery.type: ${ELASTICSEARCH_DISCOVERY_TYPE}
      ES_JAVA_OPTS: ${ELASTICSEARCH_ES_JAVA_OPTS}
      xpack.security.enabled: ${ELASTICSEARCH_XPACK_SECURITY_ENABLED}
    volumes:
      - ./.docker/elastic:/var/lib/elasticsearch/data
    networks:
      net:
        ipv4_address: ${ELASTICSEARCH_IP_ADDRESS}

  kibana:
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    container_name: magento_two_kibana
    environment:
      ELASTICSEARCH_HOSTS: ${KIBANA_ENVIRONMENT_HOST}
      ELASTICSEARCH_URL: ${KIBANA_ENVIRONMENT_URL}
      elasticsearch.ssl.verificationMode: ${KIBANA_ELASTICSEARCH_SSL}
    depends_on:
      - elasticsearch
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      net:
        ipv4_address: ${KIBANA_IP_ADDRESS}

networks:
  net:
    driver: bridge
    ipam:
      config:
        - subnet: ${MAGENTO_NETWORK_SUBNET}
          gateway: ${MAGENTO_NETWORK_GATEWAY}

volumes:
  db:
